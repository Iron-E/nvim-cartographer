*cartographer.txt*           Create mappings with Lua
*cartographer*
*nvim-cartographer*

================================================================================
0. Table of Contents                                            *cartographer-toc*

1. About ................ |cartographer-about|
2. Usage ................ |cartographer-usage|

================================================================================
1. About                                                      *cartographer-about*

This is a plugin for Neovim which aims to simplify setting and deleting with
keybindings / |:map|pings in Lua The target audience is users who are trying to
port from an |init.vim| to an |init.lua| following the release of Neovim 0.5.

Here is an example: >
	-- This is how you map with the Neovim API
	vim.api.nvim_set_keymap('n', 'gr', '<Cmd>lua vim.lsp.buf.references()<CR>',
		{noremap=true, silent=true}
	)

	-- This is how you do that with `nvim-cartographer`
	map.n.nore.silent['gr'] = '<Cmd>lua vim.lsp.buf.references()<CR>'
<

================================================================================
2. Usage                                                      *cartographer-usage*

To import this plugin, add the following line to the top of any file you wish to
use this plugin in: >
	local map = require 'cartographer'
<

This plugin implements a builder to make toggling options as easy as possible.
You may specify zero to one of |nvim_set_keymap|'s {mode} argument (i.e. you
can `map.x` or `map`).  It supports all of the |:map-arguments|, and `nore`
is used to perform a non-|recursive_mapping|. The ordering of arguments is not
important: >
	assert(vim.deep_equal(map.n.nore.silent.unique, map.silent.n.unique.nore))
<

Here is an exmaple: >
	-- `:map` 'gr' in normal mode to searching for references with the LSP
	map.n.nore.silent['gr'] = '<Cmd>lua vim.lsp.buf.references()<CR>'
<

The above is equivalent to the following VimL: >
	" This is how you bind `gr` to the builtin LSP symbol-references command
	nnoremap <silent> gr <Cmd>lua vim.lsp.buf.references()<CR>
<

--------------------------------------------------------------------------------
BUFFER-LOCAL MAPPING                                   *cartographer-buffer-local*

You can create mappings for specific buffers: >
	local nnoremap = map.n.nore.silent

	-- Only buffer sets map to current buffer
	nnoremap.buffer['gr'] = '<Cmd>lua vim.lsp.buf.references()<CR>'

	-- You can specify bufnr like <bufer=n>
	-- This keymap will be set for buffer 3
	nnoremap.buffer3['gr'] = '<Cmd>lua vim.lsp.buf.references()<CR>'
<

--------------------------------------------------------------------------------
HOOKS                                                         *cartographer-hooks*

You can register a function to be called when mapping or unmapping. This
function has the same parameters as |nvim_buf_set_keymap|. >
	local map = require 'cartographer'
	map:hook(function(buffer, mode, lhs, rhs, opts)
		-- setup which-key, etc
		print(vim.inspect(lhs)..' was mapped to '..vim.inspect(rhs))
	end)
	map['zxpp'] = vim.lsp.buf.definition
<

The `buffer` parameter will be `nil` when the mapping is not buffer-local.
See: |cartographer-buffer-local|

--------------------------------------------------------------------------------
LUA FUNCTIONS                                         *cartographer-lua-functions*

You can also register `local` lua `function`s to mappings, rather than attempt to
navigate |v:lua| / |luaeval| bindings: >
	local api = vim.api
	local go = vim.go

	local function float_term()
		local buffer = api.nvim_create_buf(false, true)
		local window = api.nvim_open_win(buffer, true,
		{
			relative = 'cursor',
			height = math.floor(go.lines / 2),
			width = math.floor(go.columns / 2),
			col = 0,
			row = 0,
		})
		api.nvim_command 'terminal'
	end

	map.n.nore.silent['<Tab>'] = float_term
<

--------------------------------------------------------------------------------
MULTIPLE MODES                                       *cartographer-multiple-modes*

You can |:map| to multiple {mode}s if necessary. >
	-- Map `gr` to LSP symbol references in 'x' and 'n' modes.
	map.n.x.nore.silent['gr'] = '<Cmd>lua vim.lsp.buf.references()<CR>'
<

--------------------------------------------------------------------------------
UNMAPPING                                                 *cartographer-unmapping*

You can |:unmap| as well by setting a {lhs} to `nil` instead of any {rhs}: >
	-- `:unmap` 'zfo' in `x` mode
	map.x['zfo'] = nil
<

================================================================================
vim:tw=80:ts=4:ft=help:norl:
